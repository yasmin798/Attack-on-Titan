package game.engine;
import java.util.*;



//import game.engine.weapons.*;
import game.engine.weapons.factory.*;
import game.engine.lanes.*;
import game.engine.titans.*;
import game.engine.base.*;
import game.engine.dataloader.*;

import java.io.*; 

public class Battle {
	private static final int[][] PHASES_APPROACHING_TITANS={{1,1,1,2,1,3,4},{2,2,2,1,3,3,4},{4,4,4,4,4,4,4}};
	private static final int WALL_BASE_HEALTH = 10000;
	private int numberOfTurns;
	private int resourcesGathered;
	private BattlePhase battlePhase;
    private int numberOfTitansPerTurn;
    private int score;
    private int titanSpawnDistance;
    private final WeaponFactory weaponFactory ;
    private final HashMap<Integer, TitanRegistry> titansArchives;
    private final ArrayList<Titan> approachingTitans;
	private final PriorityQueue<Lane> lanes;
	private final ArrayList<Lane> originalLanes;
	
	public Battle(int numberOfTurns, int score, int titanSpawnDistance, int initialNumOfLanes,
			int initialResourcesPerLane) throws IOException{
		this.numberOfTurns = numberOfTurns;
		this.score=score;
		this.titanSpawnDistance= titanSpawnDistance;
		this.resourcesGathered=initialResourcesPerLane*initialNumOfLanes;
		this.numberOfTitansPerTurn=1;
		this.battlePhase = BattlePhase.EARLY;
		this.originalLanes=new ArrayList<>();
		this.lanes= new PriorityQueue<>();
		this.approachingTitans= new ArrayList<>();
		this.titansArchives=DataLoader.readTitanRegistry();
		this.weaponFactory= new WeaponFactory();
		this.initializeLanes(initialNumOfLanes);
		
		
		
	}
	private void initializeLanes(int numOfLanes) {
		for (int i = 0; i < numOfLanes; i++) {
			Wall l= new Wall(WALL_BASE_HEALTH);
            Lane lane = new Lane(l);
            originalLanes.add(lane);
            lanes.add(lane);
            
        }
	} // this method is generated by the help of AI
	public int getNumberOfTurns() {
		return numberOfTurns;
	}
	public void setNumberOfTurns(int numberOfTurns) {
		if(numberOfTurns>0) {
		this.numberOfTurns = numberOfTurns;
	}}
	public int getResourcesGathered() {
		return resourcesGathered;
	}
	public void setResourcesGathered(int resourcesGathered) {
		if(resourcesGathered>0) {
		this.resourcesGathered = resourcesGathered;
	}}
	public BattlePhase getBattlePhase() {
		return battlePhase;
	}
	public void setBattlePhase(BattlePhase battlePhase) {
		this.battlePhase = battlePhase;
	}
	public int getNumberOfTitansPerTurn() {
		return numberOfTitansPerTurn;
	}
	public void setNumberOfTitansPerTurn(int numberOfTitansPerTurn) {
		if(numberOfTitansPerTurn>0) {
		this.numberOfTitansPerTurn = numberOfTitansPerTurn;
	}}
	public int getScore() {
		return score;
	}
	public void setScore(int score) {
		if(score>0) {
		this.score = score;
	}}
	public int getTitanSpawnDistance() {
		return titanSpawnDistance;
	}
	public void setTitanSpawnDistance(int titanSpawnDistance) {
		if(titanSpawnDistance>0) {
		this.titanSpawnDistance = titanSpawnDistance;
	}}
	public static int[][] getPhasesApproachingTitans() {
		return PHASES_APPROACHING_TITANS;
	}
	public static int getWallBaseHealth() {
		return WALL_BASE_HEALTH;
	}
	public WeaponFactory getWeaponFactory() {
		return weaponFactory;
	}
	public HashMap<Integer, TitanRegistry> getTitansArchives() {
		return titansArchives;
	}
	public ArrayList<Titan> getApproachingTitans() {
		return approachingTitans;
	}
	public PriorityQueue<Lane> getLanes() {
		return lanes;
	}
	public ArrayList<Lane> getOriginalLanes() {
		return originalLanes;
	}
}
